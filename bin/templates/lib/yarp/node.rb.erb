module YARP
  <%- nodes.each do |node| -%>
  <%= "#{node.comment.split("\n").map { |line| "# #{line}" }.join("\n  ")}\n  " if node.comment %>class <%= node.name -%> < Node
    <%- node.params.each do |param| -%>
    # attr_reader <%= param.name %>: <%= param.rbs_class %>
    attr_reader :<%= param.name %>

    <%- end -%>

    # def initialize: (<%= (node.params.map { |param| "#{param.name}: #{param.rbs_class}" } + ["start_offset: Integer", "end_offset: Integer"]).join(", ") %>) -> void
    def initialize(<%= (node.params.map(&:name) + ["start_offset", "end_offset"]).join(", ") %>)
      <%- node.params.each do |param| -%>
      @<%= param.name %> = <%= param.name %>
      <%- end -%>
      @start_offset = start_offset
      @end_offset = end_offset
    end

    # def accept: (visitor: Visitor) -> void
    def accept(visitor)
      visitor.visit_<%= node.human %>(self)
    end

    # def child_nodes: () -> Array[nil | Node]
    def child_nodes
      [<%= node.params.filter_map { |param|
        case param
        when SingleNodeParam then param.name
        when NodeListParam then "*#{param.name}"
        end
      }.join(", ") %>]
    end

    # def deconstruct: () -> Array[nil | Node]
    alias deconstruct child_nodes

    # def deconstruct_keys: (keys: Array[Symbol]) -> Hash[Symbol, nil | Node | Array[Node] | String | Token | Array[Token] | Location]
    def deconstruct_keys(keys)
      { <%= (node.params.map { |param| "#{param.name}: #{param.name}" } + ["location: location"]).join(", ") %> }
    end
  end

  <%- end -%>
  class Visitor < BasicVisitor
    <%- nodes.each do |node| -%>
    # Visit a <%= node.name %> node
    alias visit_<%= node.human %> visit_child_nodes
<%= "\n" if node != nodes.last -%>
    <%- end -%>
  end

  module DSL
    private

    # Create a new Location object
    def Location(start_offset = 0, end_offset = 0)
      Location.new(start_offset, end_offset)
    end
    <%- nodes.each do |node| -%>

    # Create a new <%= node.name %> node
    def <%= node.name %>(<%= node.params.map(&:name).join(", ") %>)
      <%= node.name %>.new(<%= (node.params.map(&:name) + ["0", "0"]).join(", ") %>)
    end
    <%- end -%>
    <%- tokens.each do |token| -%>

    # Create a new <%= token.name %> token
    def <%= token.name %>(value, location = Location.null)
      Token.new(:<%= token.name %>, value, location.start_offset, location.end_offset)
    end
    <%- end -%>
  end
end
